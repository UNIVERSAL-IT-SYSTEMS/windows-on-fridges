<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Nodebots on  </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ms-iot.github.io/windows-on-fridges//nodebot/index.xml</link>
    
    
    
    <updated>Tue, 01 Jul 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Node Client</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/client</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/client</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Node Client&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Make sure you have &lt;a href=&#34;http://nodejs.org&#34;&gt;NodeJS&lt;/a&gt; and &lt;a href=&#34;http://python.org&#34;&gt;Python&lt;/a&gt; installed and in your path&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Johnny-Five is the client library we will be using to interact with Firmata on the Galileo. Johnny-Five requires &lt;a href=&#34;https://github.com/voodootikigod/node-serialport&#34;&gt;SerialPort&lt;/a&gt; which is built with Python.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To get started clone the &lt;a href=&#34;https://github.com/ms-iot/wof-nodebot&#34;&gt;wof-nodebot-client&lt;/a&gt; repo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/ms-iot/wof-nodebot
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Node dependencies from the packages.json file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd wof-nodebot
npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Comment out line 485, there are some issues with a logging dependency&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//message[color];
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the client.js file change galileoIP to reflect either the hostname or IP Address of your board.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var galileoIP = &#39;mygalileo&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When we connect to a socket server you may want to change the serverUrl to an endpoint on Azure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var serverUrl = &#39;http://localhost:1337&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We should now be able to test the client, from the client source directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node client.js
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We should see a REPL prompt, at the prompt we can test the motors&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;motors.left.fwd(255)
motors.right.rev(255)
motors.left.stop()
motors.right.stop()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point we should have a working robot that you can control from the command line.
We will now connect the client to the socket server that can run locally or on Azure.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Connecting to Firmata&lt;/h2&gt;

&lt;p&gt;Firmata is normally controlled over serial however, the Galileo does not have a proper serial connection to the computer.
  We instead use &lt;a href=&#34;https://github.com/ms-iot/galileo-sdk/blob/develop/source/NetworkSerial.cpp&#34;&gt;Network Serial&lt;/a&gt; for serial communication.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the case of Node we use the net package to create a socket connection on the &lt;em&gt;default port 27015&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var net = require(&amp;quot;net&amp;quot;);


var socket = net.createConnection(27015, galileoIP); 
console.log(&#39;Socket created.&#39;);
this.socket.on(&#39;data&#39;, function (data) {
  // Log the response from the HTTP server.
  console.log(&#39;RESPONSE: &#39; + data);
}).on(&#39;connect&#39;, function () {
  // Manually write an HTTP request.
  console.log(&amp;quot;connected&amp;quot;);
}).on(&#39;end&#39;, function () {
  console.log(&#39;DONE&#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then we can create a Johnny-Five board object with this socket as the port.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var five = require(&amp;quot;johnny-five&amp;quot;);


board = new five.Board({
  port: socket
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node Server</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/server</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/server</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Node Server&lt;/h2&gt;

&lt;p&gt;The node server uses Expressjs for handling HTTP requests and socket.io for talking to the client. This allows us to control the robot with simple REST calls to an endpoint either locally or in the cloud.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Clone the &lt;a href=&#34;http://github.com/ms-iot/wof-nodebot-server&#34;&gt;wof-nodebot-server&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone http://github.com/ms-iot/wof-nodebot-server
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install dependencies&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To run locally&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To deploy to Azure you can follow &lt;a href=&#34;http://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/&#34;&gt;this guide&lt;/a&gt; which will teach you how to deploy a hello world application. Instead of the the hello world application just set the upstream on the server you cloned to Azure&amp;rsquo;s endpoint.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add azure [URL for remote repository]
git push azure master
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You will need to change the server endpoint in the nodebot client&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// example Azure endpoint
var serverUrl = &#39;test-robotcontrol.azurewebsites.net&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Calibration</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/calibrating</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/calibrating</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Calibrating the Robot&lt;/h2&gt;

&lt;p&gt;The commands coming from Azure are in this format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[{&amp;quot;Distance&amp;quot;:1,&amp;quot;Angle&amp;quot;:0},{&amp;quot;Distance&amp;quot;:1.4142135623730952,&amp;quot;Angle&amp;quot;:45},{&amp;quot;Distance&amp;quot;:1,&amp;quot;Angle&amp;quot;:-135},{&amp;quot;Distance&amp;quot;:1,&amp;quot;Angle&amp;quot;:180}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But the commands the robot understands are in this format:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[{&amp;quot;direction&amp;quot;:&#39;RIGHT&#39;,&amp;quot;speed&amp;quot;:255,&amp;quot;duration&amp;quot;:100},{&amp;quot;direction&amp;quot;:&#39;FORWARD&#39;,&amp;quot;speed&amp;quot;:255,&amp;quot;duration&amp;quot;:100},{&amp;quot;direction&amp;quot;:&#39;LEFT&#39;,&amp;quot;speed&amp;quot;:255,&amp;quot;duration&amp;quot;:100},{&amp;quot;direction&amp;quot;:&#39;FORWARD&#39;,&amp;quot;speed&amp;quot;:255,&amp;quot;duration&amp;quot;:100}]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To translate between the two, we need to find out how long it takes the robot to turn a certain angle, and how long it takes to go forward a certain distance. The duration needed for each command can be easily calculated given the right, left, and forwards speeds. To make sure these speeds stay constant, we will have a set PWM at which they are measured. See below for instructions on how to measure the right and left rotational speeds, and the forward speed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var direction; 
var speed; 

if (command.Angle &amp;gt; 0) { 
    this.motorControl(&#39;RIGHT&#39;, setPWM, command.Angle / rotationalSpeedRight); 
    // deg/(deg/ms) = ms 
} else if (command.Angle &amp;lt; 0) { 

this.motorControl(&#39;LEFT&#39;, setPWM, command.Angle / rotationalSpeedLeft);  
// deg/(deg/ms) = ms 
} 

this.motorControl(&#39;FORWARD&#39;, setPWM, command.Distance / forwardSpeed);  
// distance/(distance/ms) = ms 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Calibration Variables&lt;/h3&gt;

&lt;p&gt;Every robot will be slightly different. To calibrate your robot to accurately follow your commands, follow the directions below.&lt;/p&gt;

&lt;p&gt;While measuring, keep in mind that your robot might move differently based on what surface (ex: carpet, tile, or wood flooring) it is moving on. Try to take your measurements on the surface the robot will be using most. If there are significant differences in robot performance on different surfaces you may want to keep the robot from going on certain surfaces that will throw it off by removing those paths from your map. The weight of the robot will also cause these numbers to shift. Do your measurements with a full can in the fridge.&lt;/p&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;PWM&lt;/h4&gt;

&lt;p&gt;If we are going to measure a consistent speed of the robot, the motors need to have a consistent PWM. Choose one [0, 255] and stick with it. This must stay constant throughout your measurements and whenever your robot is following the angle, distance style of instructions or else your measured speeds will be meaningless.&lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Rotational Speed Right&lt;/h4&gt;

&lt;p&gt;Rotational speed right can be calculated by sending the command&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{direction: RIGHT, speed: setPWM, duration: 100} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then measure the degrees the robot turned. It may be helpful to mark the robot&amp;rsquo;s initial heading on the ground with tape to assist with measurements.&lt;/p&gt;

&lt;p&gt;Try with a few different durations to make sure the degrees/duration stays relatively consistent.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rotationalSpeedRight = average(degrees/duration)  // degrees/millisecond when turning right  
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Rotational Speed Left&lt;/h4&gt;

&lt;p&gt;Rotational speed left can be similarly calculated with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{direction: LEFT, speed: setPWM, duration: 100} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It may turn out to be the same as rotationalSpeedRight, but you can&amp;rsquo;t assume that will be the case.&lt;/p&gt;

&lt;p&gt;Again, try with a few different durations to make sure the it is relatively consistent.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rotationalSpeedLeft = average(degrees/duration)  // degrees/millisecond when turning left 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;Forward Speed&lt;/h4&gt;

&lt;p&gt;forwardSpeed is the distance your robot moves forward in one millisecond.&lt;/p&gt;

&lt;p&gt;The unit of distance you use should match the unit of distance of the map you use.&lt;/p&gt;

&lt;p&gt;For example, if your directions pass in the distance in meters, forwardSpeed should be calculated in meters/millisecond.&lt;/p&gt;

&lt;p&gt;Use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{direction: FORWARD, speed: setPWM, duration: 100}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and measure how far your robot moves forward.&lt;/p&gt;

&lt;p&gt;Again, marking the ground could be helpful.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;forwardSpeed = average(distance/millisecond)  // distance/millisecond when going forward 
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>