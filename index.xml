<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on  </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ms-iot.github.io/windows-on-fridges//index.xml</link>
    
    
    
    <updated>Mon, 01 Jul 2013 00:00:00 UTC</updated>
    
    <item>
      <title>Introduction</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/introduction</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/introduction</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;What is Windows on Fridges?&lt;/h2&gt;

&lt;p&gt;Windows on Fridges is an end-to-end solution that makes use of the &lt;a href=&#34;http://windowsondevices.com&#34;&gt;Microsoft
Developer Platform for IoT&lt;/a&gt; with an Intel Galileo
board, and &lt;a href=&#34;http://azure.microsoft.com&#34;&gt;Microsoft Azure&lt;/a&gt; web services.&lt;/p&gt;

&lt;p&gt;It is the intern project for the 2014 Explorer interns on the Internet of Things
Experiences Team. The original conception of this project was to create an autonomous robot that
would deliver drinks to your office.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The End-to-end&lt;/h2&gt;

&lt;p&gt;The full end to end consists of multiple different pieces.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-webapp&#34;&gt;Web application&lt;/a&gt; that allows users to input a room they want a drink delivered to.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-webapp&#34;&gt;Pathfinding service&lt;/a&gt; that is hosted on azure.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-nodebot-server&#34;&gt;REST server&lt;/a&gt; that interacts with the client.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-nodebot-client&#34;&gt;Client application&lt;/a&gt; which interacts directly with the hardware.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://google.com&#34;&gt;Firmata&lt;/a&gt; the protocol running on the Galileo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All together this allows a user to input the room they want a drink delivered to.
The path is then calculated and converted to a list of instructions that are then
sent to the REST server. The REST server then sends the list to the client over
a websocket connection. The client uses a Firmata client library to communicate
with the hardware.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Next Steps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/overview/quickstart&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/windows-on-fridges&#34;&gt;Star us on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Press, Blogs and Media Coverage</title>
      <link>http://ms-iot.github.io/windows-on-fridges/community/press</link>
      <pubDate>Mon, 24 Mar 2014 20:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/community/press</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Press&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/quickstart</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/quickstart</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Step 1. Get Hello Blinky running on your board.&lt;/h2&gt;

&lt;p&gt;Follow the instructions for &lt;a href=&#34;http://ms-iot.github.io/content/HelloBlinky.htm&#34;&gt;Hello Blinky&lt;/a&gt;.
This will ensure that you can create projects and deploy to your board.&lt;/p&gt;

&lt;p&gt;This tutorial will assume a general level of understanding of the Galileo
Development Platform for Windows.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Step 2. Install Project Dependencies&lt;/h2&gt;

&lt;p&gt;This project requires a few extra peices of software.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nodejs.org&#34;&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://python.org&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Step 3. Setup Azure&lt;/h2&gt;

&lt;p&gt;This step is not required as everything can be hosted locally.&lt;/p&gt;

&lt;p&gt;At this point if you do want to use Azure, just create an account.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Future</title>
      <link>http://ms-iot.github.io/windows-on-fridges/meta/roadmap</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/meta/roadmap</guid>
      <description>&lt;p&gt;Some ideas to build on this project&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>http://ms-iot.github.io/windows-on-fridges/community/contributing</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/community/contributing</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Contributing&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://ms-iot.github.io/windows-on-fridges/community/contact</link>
      <pubDate>Mon, 24 Mar 2014 20:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/community/contact</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Contact&lt;/h2&gt;

&lt;p&gt;Join us on Freenode at #windowsondevices&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hardware</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/hardware</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/hardware</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Hardware&lt;/h2&gt;

&lt;p&gt;The parts used are entirely dependent on what you wish to build.
This is the parts list for the robot that we built.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://windowsondevices.com&#34;&gt;Galileo Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Motor-Shield-V20-p-1377.html?cPath=91_92&#34;&gt;Motor Shield&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://makeblocks.cc&#34;&gt;Makeblock Robotics Kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/NETGEAR-WNCE2001-Universal-Internet-Adapter/dp/B007CO5DZ4/ref=sr_sp-btf_title_1_8?ie=UTF8&amp;amp;qid=1406065590&amp;amp;sr=8-8&amp;amp;keywords=wifi+adapter+netgear&#34;&gt;Wireless Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Mophie-Powerstation-4000mAh-External-BlackBerry/dp/B005OW4BFE/ref=sr_sp-atf_title_1_1?ie=UTF8&amp;amp;qid=1406065626&amp;amp;sr=8-1&amp;amp;keywords=mophie+battery+pack&#34;&gt;Galileo Battery&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Galileo requires 2A at 5V&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Generic-Volt-Barrel-Power-Cable/dp/B00304DZ7I/ref=sr_sp-atf_title_1_2?ie=UTF8&amp;amp;qid=1406065711&amp;amp;sr=8-2&amp;amp;keywords=usb+to+barrel&#34;&gt;USB to Barrel Plug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Venom-5000mAh-8-Cell-Battery-Universal/dp/B001JTWSX8&#34;&gt;Motor Battery&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Ensure you motor shield can handle the voltage you will provide.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Great-Planes-Charge-Banana-Ultra/dp/B001BHLWKI/ref=sr_sp-btf_title_1_13?ie=UTF8&amp;amp;qid=1406065892&amp;amp;sr=8-13&amp;amp;keywords=deans+connector+male&#34;&gt;Deans connector&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;The leads will need to be stripped to connect to the motor shield.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Tenergy-Universal-Smart-Charger-Battery/dp/B003MXMJX8/ref=sr_sp-atf_title_1_1?ie=UTF8&amp;amp;qid=1406065971&amp;amp;sr=8-1&amp;amp;keywords=tenergy+charger&#34;&gt;Battery Charger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/AmazonBasics-4-Port-USB-2-0-Ultra-Mini/dp/B003M0NURK/ref=sr_sp-atf_title_1_2?ie=UTF8&amp;amp;qid=1406066066&amp;amp;sr=8-2&amp;amp;keywords=usb+hub&#34;&gt;USB Hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thinkgeek.com/product/96b3/&#34;&gt;Micro Fridge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configuring</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/configuration</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/configuration</guid>
      <description>

&lt;p&gt;There is some small configuration to keep in mind as you use the different parts
of this project&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Nodebot Server&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Nodebot Client&lt;/h2&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Firmata&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Source Organization</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/source-directory</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/source-directory</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Source for the Project&lt;/h2&gt;

&lt;p&gt;Sources for our project are located in multiple different repositories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web App&lt;/li&gt;
&lt;li&gt;Nodebot Server&lt;/li&gt;
&lt;li&gt;Nodebot Client&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://ms-iot.github.io/windows-on-fridges/meta/license</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/meta/license</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;License&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Build</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/building</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/building</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Building the Robot&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Step 1. Robot frame&lt;/h2&gt;

&lt;p&gt;There are many frames to choose from when it comes to building a small to mid sized robot. &lt;a href=&#34;http://www.makeblock.cc/&#34;&gt;Makeblock&lt;/a&gt; is a simple open platform for robotics that is easy to put together. Here is an example configuration of a Makeblock robot with a galileo attached. You can get pretty creative here, there is no right way to build an awesome robot.
We chose to build the &lt;a href=&#34;/windows-on-fridges/pdf/Makeblock-Big-Tank.pdf&#34;&gt;Big Tank&lt;/a&gt; frame.
&lt;img src=&#34;/windows-on-fridges/img/nodebot/nodebot-frame.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;
There are many configurations of robots you can build on Makeblocks &lt;a href=&#34;https://github.com/Makeblock-official/Assembly-Instructions&#34;&gt;assembly instruction&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Step 2. Motors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The motor shield we used is a &lt;a href=&#34;http://www.seeedstudio.com/depot/Motor-Shield-V20-p-1377.html?cPath=91_92&#34;&gt;SeeedStudio V1/V2 Motor Shield&lt;/a&gt;. This shield can either be powered directly from the board or from an external power source via its external power jack. Without external power the motors may not turn when a load is applied.

&lt;ul&gt;
&lt;li&gt;There is more documentation for the motor shield on the SeeedStudio &lt;a href=&#34;http://www.seeedstudio.com/wiki/Motor_Shield_V2.0&#34;&gt;wiki&lt;/a&gt;.
&lt;em&gt;Either the V1 or V2 motor shield from SeeedStudio will work&lt;/em&gt;
&lt;img src=&#34;/windows-on-fridges/img/nodebot/motorshield.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Connect the motor shield to the Galileo.&lt;/li&gt;
&lt;li&gt;Attach 2 motors to the shield, the polarity does not matter but will affect the direction of the motors. You may have to switch the wires if the motors are turning the wrong way.&lt;/li&gt;
&lt;li&gt;Attach the battery connector to the motor shield&amp;rsquo;s external power input.&lt;/li&gt;
&lt;li&gt;All together it should look something like this. &lt;em&gt;This version has the V1 shield, they are functionally the same&lt;/em&gt;
&lt;img src=&#34;/windows-on-fridges/img/nodebot/nodebot-motors-shield.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Step 3. Putting it all together&lt;/h2&gt;

&lt;p&gt;Secure all your parts on the robot frame. You will need space for a Galileo, 2 batteries, and a wifi adapter.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Step 4. Set up Wifi Adapter&lt;/h2&gt;

&lt;p&gt;Wifi gaming adapters allow you to connect devices to wifi that otherwise could
only connect over LAN.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Purchase an adapter, such as &lt;a href=&#34;http://www.amazon.com/NETGEAR-WNCE2001-Universal-Internet-Adapter/dp/B007CO5DZ4/ref=sr_1_3?ie=UTF8&amp;amp;qid=1404169366&amp;amp;sr=8-3&amp;amp;keywords=wireless+gaming+adapter&#34;&gt;this recommended option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow the instructions supplied with your gaming adapter to connect it to your wireless network.&lt;/li&gt;
&lt;li&gt;Connect the Gaming Adapter to the Galileo with an ethernet cable.&lt;/li&gt;
&lt;li&gt;The recommended adapter also includes a USB power cable; If your adapter includes a USB power cable connect it to the Galileo with a &lt;a href=&#34;http://www.amazon.com/Micro-USB-Male-Female-Adapter/dp/B0027YYMU6&#34;&gt;Micro USB Male to USB A Female Adapter&lt;/a&gt; . The Galileo can provide sufficient power to the recommended adapter.&lt;/li&gt;
&lt;li&gt;Connect your development machine to the same wireless network as the gaming adapter.&lt;/li&gt;
&lt;li&gt;Ping the Galileo by hostname and ensure it is connected to the network.&lt;/li&gt;
&lt;li&gt;You should now be able to deploy to the Galileo over wireless network!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Azure</title>
      <link>http://ms-iot.github.io/windows-on-fridges/webservices/azure</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/webservices/azure</guid>
      <description></description>
    </item>
    
    <item>
      <title>Firmata</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/firmata</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/firmata</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Firmata&lt;/h2&gt;

&lt;p&gt;Firmata is a protocol that allows you to use a client library to interact with microcontrollers and other hardware. We will be using Standard Firmata on the Galileo and controlling it with &lt;a href=&#34;https://github.com/rwaldron/johnny-five&#34;&gt;Johnny-Five&lt;/a&gt; a NodeJS client library that is build for robotics.&lt;/p&gt;

&lt;p&gt;We are using a &lt;a href=&#34;http://github.com/connerbrooks/firmata-galileo&#34;&gt;modified version&lt;/a&gt; of &lt;a href=&#34;http://github.com/firmata/arduino&#34;&gt;Firmata Arduino&lt;/a&gt; the headers have been altered to be compatible with the Galileo SDK.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Running Firmata&lt;/h2&gt;

&lt;p&gt;Firmata must be running on the board before the node client can interact with it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Clone the Galileo Firmata Repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/path/to/galileo/firmata
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the Visual Studio project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure the remote debugging settings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refer to the &lt;a href=&#34;http://ms-iot.github.io/content&#34;&gt;Galileo SDK documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the project to the Galileo.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you have deployed you will be able to telnet into the Galileo and remotely start firmata&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;telnet mygalileo
cd c:\test
Firmata.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We can now control the Galileo using the Firmata protocol with any client library.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Web App</title>
      <link>http://ms-iot.github.io/windows-on-fridges/webservices/webapp</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/webservices/webapp</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Web App&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Node Client</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/client</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/client</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Node Client&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Make sure you have &lt;a href=&#34;http://nodejs.org&#34;&gt;NodeJS&lt;/a&gt; and &lt;a href=&#34;http://python.org&#34;&gt;Python&lt;/a&gt; installed and in your path&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Johnny-Five is the client library we will be using to interact with Firmata on the Galileo. Johnny-Five requires &lt;a href=&#34;https://github.com/voodootikigod/node-serialport&#34;&gt;SerialPort&lt;/a&gt; which is built with Python.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To get started clone the &lt;a href=&#34;https://github.com/ms-iot/wof-nodebot&#34;&gt;wof-nodebot-client&lt;/a&gt; repo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/ms-iot/wof-nodebot
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Node dependencies from the packages.json file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd wof-nodebot
npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Comment out line 485, there are some issues with a logging dependency&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//message[color];
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the client.js file change galileoIP to reflect either the hostname or IP Address of your board.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var galileoIP = &#39;mygalileo&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When we connect to a socket server you may want to change the serverUrl to an endpoint on Azure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var serverUrl = &#39;http://localhost:1337&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We should now be able to test the client, from the client source directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node client.js
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We should see a REPL prompt, at the prompt we can test the motors&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;motors.left.fwd(255)
motors.right.rev(255)
motors.left.stop()
motors.right.stop()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point we should have a working robot that you can control from the command line.
We will now connect the client to the socket server that can run locally or on Azure.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Connecting to Firmata&lt;/h2&gt;

&lt;p&gt;Firmata is normally controlled over serial however, the Galileo does not have a proper serial connection to the computer.
  We instead use &lt;a href=&#34;https://github.com/ms-iot/galileo-sdk/blob/develop/source/NetworkSerial.cpp&#34;&gt;Network Serial&lt;/a&gt; for serial communication.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the case of Node we use the net package to create a socket connection on the &lt;em&gt;default port 27015&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var net = require(&amp;quot;net&amp;quot;);


var socket = net.createConnection(27015, galileoIP); 
console.log(&#39;Socket created.&#39;);
this.socket.on(&#39;data&#39;, function (data) {
  // Log the response from the HTTP server.
  console.log(&#39;RESPONSE: &#39; + data);
}).on(&#39;connect&#39;, function () {
  // Manually write an HTTP request.
  console.log(&amp;quot;connected&amp;quot;);
}).on(&#39;end&#39;, function () {
  console.log(&#39;DONE&#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then we can create a Johnny-Five board object with this socket as the port.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var five = require(&amp;quot;johnny-five&amp;quot;);


board = new five.Board({
  port: socket
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>