<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on  </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ms-iot.github.io/windows-on-fridges//index.xml</link>
    
    
    
    <updated>Mon, 01 Jul 2013 00:00:00 UTC</updated>
    
    <item>
      <title>Introduction</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/introduction</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/introduction</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;What is Windows on Fridges?&lt;/h2&gt;

&lt;p&gt;Windows on Fridges is an end-to-end solution that makes use of the &lt;a href=&#34;http://windowsondevices.com&#34;&gt;Microsoft
Developer Platform for IoT&lt;/a&gt; with an Intel Galileo
board, and &lt;a href=&#34;http://azure.microsoft.com&#34;&gt;Microsoft Azure&lt;/a&gt; web services.&lt;/p&gt;

&lt;p&gt;It is the intern project for the 2014 Explorer interns on the Internet of Things
Experiences Team. The original conception of this project was to create an autonomous robot that
would deliver drinks to your office.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The End-to-end&lt;/h2&gt;

&lt;p&gt;The full end to end consists of multiple different pieces.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-webapp&#34;&gt;Web application&lt;/a&gt; that allows users to input a room they want a drink delivered to.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-webapp&#34;&gt;Pathfinding service&lt;/a&gt; that is hosted on azure.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-nodebot-server&#34;&gt;REST server&lt;/a&gt; that interacts with the client.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-nodebot-client&#34;&gt;Client application&lt;/a&gt; which interacts directly with the hardware.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://google.com&#34;&gt;Firmata&lt;/a&gt; the protocol running on the Galileo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All together this allows a user to input the room they want a drink delivered to.
The path is then calculated and converted to a list of instructions that are then
sent to the REST server. The REST server then sends the list to the client over
a websocket connection. The client uses a Firmata client library to communicate
with the hardware.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Next Steps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/overview/quickstart&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/windows-on-fridges&#34;&gt;Star us on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Press, Blogs and Media Coverage</title>
      <link>http://ms-iot.github.io/windows-on-fridges/community/press</link>
      <pubDate>Mon, 24 Mar 2014 20:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/community/press</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Press&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/quickstart</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/quickstart</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Step 1. Get Hello Blinky running on your board.&lt;/h2&gt;

&lt;p&gt;Follow the instructions for &lt;a href=&#34;http://ms-iot.github.io/content/HelloBlinky.htm&#34;&gt;Hello Blinky&lt;/a&gt;.
This will ensure that you can create projects and deploy to your board.&lt;/p&gt;

&lt;p&gt;This tutorial will assume a general level of understanding of the Galileo
Development Platform for Windows.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Step 2. Install Project Dependencies&lt;/h2&gt;

&lt;p&gt;This project requires a few extra peices of software.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nodejs.org&#34;&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://python.org&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Step 3. Setup Azure&lt;/h2&gt;

&lt;p&gt;This step is not required as everything can be hosted locally.&lt;/p&gt;

&lt;p&gt;At this point if you do want to use Azure, just create an account.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Future</title>
      <link>http://ms-iot.github.io/windows-on-fridges/meta/roadmap</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/meta/roadmap</guid>
      <description>&lt;p&gt;Some ideas to build on this project&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>http://ms-iot.github.io/windows-on-fridges/community/contributing</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/community/contributing</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Contributing&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://ms-iot.github.io/windows-on-fridges/community/contact</link>
      <pubDate>Mon, 24 Mar 2014 20:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/community/contact</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Contact&lt;/h2&gt;

&lt;p&gt;Join us on Freenode at #windowsondevices&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hardware</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/hardware</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/hardware</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Hardware&lt;/h2&gt;

&lt;p&gt;The parts used are entirely dependent on what you wish to build.
This is the parts list for the robot that we built.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://windowsondevices.com&#34;&gt;Galileo Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Motor-Shield-V20-p-1377.html?cPath=91_92&#34;&gt;Motor Shield&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://makeblocks.cc&#34;&gt;Makeblock Robotics Kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/NETGEAR-WNCE2001-Universal-Internet-Adapter/dp/B007CO5DZ4/ref=sr_sp-btf_title_1_8?ie=UTF8&amp;amp;qid=1406065590&amp;amp;sr=8-8&amp;amp;keywords=wifi+adapter+netgear&#34;&gt;Wireless Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Mophie-Powerstation-4000mAh-External-BlackBerry/dp/B005OW4BFE/ref=sr_sp-atf_title_1_1?ie=UTF8&amp;amp;qid=1406065626&amp;amp;sr=8-1&amp;amp;keywords=mophie+battery+pack&#34;&gt;Galileo Battery&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Galileo requires 2A at 5V&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Generic-Volt-Barrel-Power-Cable/dp/B00304DZ7I/ref=sr_sp-atf_title_1_2?ie=UTF8&amp;amp;qid=1406065711&amp;amp;sr=8-2&amp;amp;keywords=usb+to+barrel&#34;&gt;USB to Barrel Plug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Venom-5000mAh-8-Cell-Battery-Universal/dp/B001JTWSX8&#34;&gt;Motor Battery&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Ensure you motor shield can handle the voltage you will provide.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Great-Planes-Charge-Banana-Ultra/dp/B001BHLWKI/ref=sr_sp-btf_title_1_13?ie=UTF8&amp;amp;qid=1406065892&amp;amp;sr=8-13&amp;amp;keywords=deans+connector+male&#34;&gt;Deans connector&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;The leads will need to be stripped to connect to the motor shield.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Tenergy-Universal-Smart-Charger-Battery/dp/B003MXMJX8/ref=sr_sp-atf_title_1_1?ie=UTF8&amp;amp;qid=1406065971&amp;amp;sr=8-1&amp;amp;keywords=tenergy+charger&#34;&gt;Battery Charger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/AmazonBasics-4-Port-USB-2-0-Ultra-Mini/dp/B003M0NURK/ref=sr_sp-atf_title_1_2?ie=UTF8&amp;amp;qid=1406066066&amp;amp;sr=8-2&amp;amp;keywords=usb+hub&#34;&gt;USB Hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thinkgeek.com/product/96b3/&#34;&gt;Micro Fridge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configuring</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/configuration</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/configuration</guid>
      <description>

&lt;p&gt;There is some small configuration to keep in mind as you use the different parts
of this project&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Nodebot Server&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Nodebot Client&lt;/h2&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Firmata&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Source Organization</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/source-directory</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/source-directory</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Source for the Project&lt;/h2&gt;

&lt;p&gt;Sources for our project are located in multiple different repositories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web App&lt;/li&gt;
&lt;li&gt;Nodebot Server&lt;/li&gt;
&lt;li&gt;Nodebot Client&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://ms-iot.github.io/windows-on-fridges/meta/license</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/meta/license</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;License&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Azure</title>
      <link>http://ms-iot.github.io/windows-on-fridges/webservices/azure</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/webservices/azure</guid>
      <description></description>
    </item>
    
    <item>
      <title>Build</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/building</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/building</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Building the Robot&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Step 1. Robot frame&lt;/h2&gt;

&lt;p&gt;There are many frames to choose from when it comes to building a small to mid sized robot. &lt;a href=&#34;http://www.makeblock.cc/&#34;&gt;Makeblock&lt;/a&gt; is a simple open platform for robotics that is easy to put together. Here is an example configuration of a Makeblock robot with a galileo attached. You can get pretty creative here, there is no right way to build an awesome robot.
We chose to build the &lt;a href=&#34;/windows-on-fridges/pdf/Makeblock-Big-Tank.pdf&#34;&gt;Big Tank&lt;/a&gt; frame.
&lt;img src=&#34;/windows-on-fridges/img/nodebot/nodebot-frame.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;
There are many configurations of robots you can build on Makeblocks &lt;a href=&#34;https://github.com/Makeblock-official/Assembly-Instructions&#34;&gt;assembly instruction&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Step 2. Motors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The motor shield we used is a &lt;a href=&#34;http://www.seeedstudio.com/depot/Motor-Shield-V20-p-1377.html?cPath=91_92&#34;&gt;SeeedStudio V1/V2 Motor Shield&lt;/a&gt;. This shield can either be powered directly from the board or from an external power source via its external power jack. Without external power the motors may not turn when a load is applied.

&lt;ul&gt;
&lt;li&gt;There is more documentation for the motor shield on the SeeedStudio &lt;a href=&#34;http://www.seeedstudio.com/wiki/Motor_Shield_V2.0&#34;&gt;wiki&lt;/a&gt;.
&lt;em&gt;Either the V1 or V2 motor shield from SeeedStudio will work&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Connect the motor shield to the Galileo.&lt;/li&gt;
&lt;li&gt;Attach 2 motors to the shield, the polarity does not matter but will affect the direction of the motors. You may have to switch the wires if the motors are turning the wrong way.&lt;/li&gt;
&lt;li&gt;Attach the battery connector to the motor shield&amp;rsquo;s external power input.
&lt;img src=&#34;/windows-on-fridges/img/nodebot/motorshield.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/li&gt;
&lt;li&gt;All together it should look something like this. &lt;em&gt;This version has the V1 shield, they are functionally the same&lt;/em&gt;
&lt;img src=&#34;/windows-on-fridges/img/nodebot/nodebot-motors-shield.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Step 3. Putting it all together&lt;/h2&gt;

&lt;p&gt;Secure all your parts on the robot frame. You will need space for a Galileo, 2 batteries, and a wifi adapter.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Step 4. Set up Wifi Adapter&lt;/h2&gt;

&lt;p&gt;Wifi gaming adapters allow you to connect devices to wifi that otherwise could
only connect over LAN.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Purchase an adapter, such as &lt;a href=&#34;http://www.amazon.com/NETGEAR-WNCE2001-Universal-Internet-Adapter/dp/B007CO5DZ4/ref=sr_1_3?ie=UTF8&amp;amp;qid=1404169366&amp;amp;sr=8-3&amp;amp;keywords=wireless+gaming+adapter&#34;&gt;this recommended option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow the instructions supplied with your gaming adapter to connect it to your wireless network.&lt;/li&gt;
&lt;li&gt;Connect the Gaming Adapter to the Galileo with an ethernet cable.&lt;/li&gt;
&lt;li&gt;The recommended adapter also includes a USB power cable; If your adapter includes a USB power cable connect it to the Galileo with a &lt;a href=&#34;http://www.amazon.com/Micro-USB-Male-Female-Adapter/dp/B0027YYMU6&#34;&gt;Micro USB Male to USB A Female Adapter&lt;/a&gt; . The Galileo can provide sufficient power to the recommended adapter.&lt;/li&gt;
&lt;li&gt;Connect your development machine to the same wireless network as the gaming adapter.&lt;/li&gt;
&lt;li&gt;Ping the Galileo by hostname and ensure it is connected to the network.&lt;/li&gt;
&lt;li&gt;You should now be able to deploy to the Galileo over wireless network!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Firmata</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/firmata</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/firmata</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Firmata&lt;/h2&gt;

&lt;p&gt;Firmata is a protocol that allows you to use a client library to interact with microcontrollers and other hardware. We will be using Standard Firmata on the Galileo and controlling it with &lt;a href=&#34;https://github.com/rwaldron/johnny-five&#34;&gt;Johnny-Five&lt;/a&gt; a NodeJS client library that is build for robotics.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Web App</title>
      <link>http://ms-iot.github.io/windows-on-fridges/webservices/webapp</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/webservices/webapp</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Web App&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Path Finding</title>
      <link>http://ms-iot.github.io/windows-on-fridges/webservices/pathfinding</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/webservices/pathfinding</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Path Finding&lt;/h2&gt;

&lt;h3 id=&#34;toc_1&#34;&gt;Editing and Testing the Code&lt;/h3&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Create a Unit Test Project&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If you haven&amp;rsquo;t already, download Visual Studio. &lt;link&gt; //Should this be in getting started?&lt;/li&gt;
&lt;li&gt;The first step is to make sure the code works. Create a new test project by opening Visual Studio and going to File-&amp;gt;New-&amp;gt;Project at the top.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/creating-test-project/file-new-project.png&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the left hand side of the pop-up window, select Installed-&amp;gt;Templates-&amp;gt;Visual C#-&amp;gt;Test. Then in the middle part of the pop-up, click on Unit Test Project. Having a Unit Test Project will allow you to easily run all the tests at once. If you change anything in the code, you can quickly know whether it broke something else. Be sure to change the name of the project at the bottom. We called ours PathFindingTests, but you can name yours whatever you like. Press ok when you are done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/creating-test-project/new-unit-test-project.png&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Adding the Files&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Now that you have a brand new Unit Test Project, you need to add the test files, and the files you need to run those tests&amp;hellip; These can be found on our &lt;a href=&#34;https://github.com/ms-iot/wof-webapp.png&#34;&gt;web app&amp;rsquo;s github repository&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;While those files are downloading, create a place to put them in your project. The files will be sorted into classes and tests so let&amp;rsquo;s make two folders in our project labeled classes, and tests. Right click on the project name in the solution explorer (found on the right hand side). Select Add-&amp;gt;New Folder as shown in the picture. Do this twice, naming one &amp;ldquo;tests&amp;rdquo; and the other &amp;ldquo;classes&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/creating-test-project/add-folder.png&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Once you have downloaded the files, right click on the newly created classes file. Select Add-&amp;gt;Existing Item&amp;hellip; Find the place where you downloaded the wof-webapp code. In wof-webapp-&amp;gt;App_Code, open the classes folder and select all the files in there. Click add. Do the same with the tests folder, selecting all the files from github&amp;rsquo;s test folder and clicking add.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/creating-test-project/add-existing-item.png&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Adding References&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Now you have all the code you need. You should be able to just click Test-&amp;gt;Run-&amp;gt;All Tests, right? Not quite. We are still missing some assembly references (as the debugger will gladly tell you if you try to build the project). Don&amp;rsquo;t worry, this is easy to fix.&lt;/li&gt;
&lt;li&gt;Right click on the project name again in the Solution Explorer. Select Add-&amp;gt;Reference&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/creating-test-project/add-reference.png&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On the left hand side of the pop-up, click on Assemblies-&amp;gt;Framework. Next, click the checkmark next to each of the following Assemblies:

&lt;ul&gt;
&lt;li&gt;System.Drawing&lt;/li&gt;
&lt;li&gt;System.Web.Extensions&lt;/li&gt;
&lt;li&gt;System.Windows&lt;/li&gt;
&lt;li&gt;System.XML&lt;/li&gt;
&lt;li&gt;System.Xml.Linq&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Once all these are checked, click ok.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/creating-test-project/picking-references.png&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;NOW you can click Test-&amp;gt;Run-&amp;gt;All Tests and you should see them all pass with flying colors. If a test fails, try to figure out why it failed and submit a fix. Or yell at the person who changed the code without fixing the tests until they fix it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;What&amp;rsquo;s Next?&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;If all the tests pass, then you know you can use the files in the project. If you want to make changes to any of these files or extend them in any way, make sure that you write tests for your changes and that your changes don&amp;rsquo;t break anyone ese&amp;rsquo;s tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Running the Code&lt;/h3&gt;

&lt;h4 id=&#34;toc_7&#34;&gt;Creating an SVG Map&lt;/h4&gt;

&lt;p&gt;We have a simple converter that takes an image of the map in SVG format and creates a graph to make finding the shortest path between two rooms faster and easier. Our converter does not cover all the variety of SVG files, but strictly supports the maps generated the following way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Step 1&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install Microsoft Visio 2013 if you don&amp;rsquo;t have one already&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Step 2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Take any map of the space in JPEG format and open it in Visio&lt;/li&gt;
&lt;li&gt;WARNING: Other file types might work with these instructions but were not tested.&lt;/li&gt;
&lt;li&gt;HINT: Cannot open your map in Visio? You might have to change the file type at the bottom right corner of the pop-up.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/map/1.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To make your future SVG map easily extractable from the image you opened, create a new layer by going to Home -&amp;gt; Layers -&amp;gt; Layer properties -&amp;gt; New. Press &amp;ldquo;ok&amp;rdquo; after you’re done.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/map/2.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 3

&lt;ul&gt;
&lt;li&gt;Use the line tool to draw all paths that you want the robot to wander. Make sure you &amp;ldquo;snap&amp;rdquo; the lines together if you want the two paths to actually be connected.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/map/3.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/map/4.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use the line tool to create little strokes crossing the paths at the places you want robot to be able to stop at. To make your web-app aware of the available stops, after creating each of the strokes left-click on it and choose data -&amp;gt; define shape data. In the pop-up input &amp;ldquo;officeNumber&amp;rdquo; as a title and the actual room number as value. Save. To check that the officeNumber has actually been set up or to change the officeNumber you can always use the pointer tool to select the stroke and view the shape data.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/map/5.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/map/6.JPG&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 4

&lt;ul&gt;
&lt;li&gt;With the current implementation the robot stops in the hallways where you placed the crossing points. But you don&amp;rsquo;t want the robot to sit in a hallway all the time. This way, you need a little hub for it to start from amd come back to. To do that draw a path leading inside the room you want the robot to be located. Inside the room create a crossing point by drawing another stroke and setting its &amp;ldquo;officeNumber&amp;rdquo; value to 0.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/map/65.JPG&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 5

&lt;ul&gt;
&lt;li&gt;A map is no good without the scale! To add the scale just put a line over something you know the actual length of, like a room or a hallway. Your map might have an actual scale at the bottom which you can use. Left-click on your scale and choose &amp;ldquo;define shape data&amp;rdquo;. In the pop-up input &amp;ldquo;scale&amp;rdquo; as a title and the actual length as value. Save.&lt;/li&gt;
&lt;li&gt;Note that the units you put in the &amp;ldquo;value&amp;rdquo; field will be the units the program will use from now on. For example, if my scale is 15 meters, meters will be my units.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/map/7.JPG&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Step 6

&lt;ul&gt;
&lt;li&gt;When you&amp;rsquo;re done, save your Visio project to come back and modify your map whenever you want.&lt;/li&gt;
&lt;li&gt;After that, delete the underlying map image by selecting it with a pointer tool and pressing “delete” button.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/map/8.JPG&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/map/9.JPG&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure you don&amp;rsquo;t have any particular shape selected to avoid having only this shape saved.&lt;/li&gt;
&lt;li&gt;Go to file -&amp;gt; export -&amp;gt; change file type. Double-click on &amp;ldquo;SVG Scalable Vector Graphics&amp;rdquo;. Save your map as &amp;ldquo;map.svg&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;WARNING: Don&amp;rsquo;t save your Visio project after you deleted the original map. This will make it very inconvenient to add changes to your map later.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Congratulations! Your map is ready. You can view the generated SVG code by opening the map file in Notepad or Visual Studio.&lt;/p&gt;

&lt;h4 id=&#34;toc_8&#34;&gt;Getting a Path&lt;/h4&gt;

&lt;h4 id=&#34;toc_9&#34;&gt;Running From Azure&lt;/h4&gt;

&lt;p&gt;&lt;Need Anna&#39;s help filling in&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>