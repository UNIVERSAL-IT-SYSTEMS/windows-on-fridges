<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on  </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ms-iot.github.io/windows-on-fridges//index.xml</link>
    
    
    
    <updated>Mon, 01 Jul 2013 00:00:00 UTC</updated>
    
    <item>
      <title>Introduction</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/introduction</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/introduction</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;What is Windows on Fridges?&lt;/h2&gt;

&lt;p&gt;Windows on Fridges is an end-to-end solution that makes use of the &lt;a href=&#34;http://windowsondevices.com&#34;&gt;Microsoft
Developer Platform for IoT&lt;/a&gt; with an Intel Galileo
board, and &lt;a href=&#34;http://azure.microsoft.com&#34;&gt;Microsoft Azure&lt;/a&gt; web services.&lt;/p&gt;

&lt;p&gt;It is the intern project for the 2014 Explorer interns on the Internet of Things
Experiences Team. The original conception of this project was to create an autonomous robot that
would deliver drinks to your office.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The End-to-end&lt;/h2&gt;

&lt;p&gt;The full end to end consists of multiple different pieces.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-webapp&#34;&gt;Web application&lt;/a&gt; that allows users to input a room they want a drink delivered to.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-webapp&#34;&gt;Pathfinding service&lt;/a&gt; that is hosted on azure.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-nodebot-server&#34;&gt;REST server&lt;/a&gt; that interacts with the client.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/wof-nodebot-client&#34;&gt;Client application&lt;/a&gt; which interacts directly with the hardware.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://google.com&#34;&gt;Firmata&lt;/a&gt; the protocol running on the Galileo.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All together this allows a user to input the room they want a drink delivered to.
The path is then calculated and converted to a list of instructions that are then
sent to the REST server. The REST server then sends the list to the client over
a websocket connection. The client uses a Firmata client library to communicate
with the hardware.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Next Steps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/overview/quickstart&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/ms-iot/windows-on-fridges&#34;&gt;Star us on Github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Press, Blogs and Media Coverage</title>
      <link>http://ms-iot.github.io/windows-on-fridges/community/press</link>
      <pubDate>Mon, 24 Mar 2014 20:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/community/press</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Press&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/quickstart</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/quickstart</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Step 1. Get Hello Blinky running on your board.&lt;/h2&gt;

&lt;p&gt;Follow the instructions for &lt;a href=&#34;http://ms-iot.github.io/content/HelloBlinky.htm&#34;&gt;Hello Blinky&lt;/a&gt;.
This will ensure that you can create projects and deploy to your board.&lt;/p&gt;

&lt;p&gt;This tutorial will assume a general level of understanding of the Galileo
Development Platform for Windows.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Step 2. Install Project Dependencies&lt;/h2&gt;

&lt;p&gt;This project requires a few extra peices of software.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://nodejs.org&#34;&gt;NodeJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://python.org&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Step 3. Setup Azure&lt;/h2&gt;

&lt;p&gt;This step is not required as everything can be hosted locally.&lt;/p&gt;

&lt;p&gt;At this point if you do want to use Azure, just create an account.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Future</title>
      <link>http://ms-iot.github.io/windows-on-fridges/meta/roadmap</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/meta/roadmap</guid>
      <description>&lt;p&gt;Some ideas to build on this project&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contributing</title>
      <link>http://ms-iot.github.io/windows-on-fridges/community/contributing</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/community/contributing</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Contributing&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>http://ms-iot.github.io/windows-on-fridges/community/contact</link>
      <pubDate>Mon, 24 Mar 2014 20:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/community/contact</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Contact&lt;/h2&gt;

&lt;p&gt;Join us on Freenode at #windowsondevices&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hardware</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/hardware</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/hardware</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Hardware&lt;/h2&gt;

&lt;p&gt;The parts used are entirely dependent on what you wish to build.
This is the parts list for the robot that we built.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://windowsondevices.com&#34;&gt;Galileo Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.seeedstudio.com/depot/Motor-Shield-V20-p-1377.html?cPath=91_92&#34;&gt;Motor Shield&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://makeblocks.cc&#34;&gt;Makeblock Robotics Kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/NETGEAR-WNCE2001-Universal-Internet-Adapter/dp/B007CO5DZ4/ref=sr_sp-btf_title_1_8?ie=UTF8&amp;amp;qid=1406065590&amp;amp;sr=8-8&amp;amp;keywords=wifi+adapter+netgear&#34;&gt;Wireless Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Mophie-Powerstation-4000mAh-External-BlackBerry/dp/B005OW4BFE/ref=sr_sp-atf_title_1_1?ie=UTF8&amp;amp;qid=1406065626&amp;amp;sr=8-1&amp;amp;keywords=mophie+battery+pack&#34;&gt;Galileo Battery&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Galileo requires 2A at 5V&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Generic-Volt-Barrel-Power-Cable/dp/B00304DZ7I/ref=sr_sp-atf_title_1_2?ie=UTF8&amp;amp;qid=1406065711&amp;amp;sr=8-2&amp;amp;keywords=usb+to+barrel&#34;&gt;USB to Barrel Plug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Venom-5000mAh-8-Cell-Battery-Universal/dp/B001JTWSX8&#34;&gt;Motor Battery&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Ensure you motor shield can handle the voltage you will provide.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Great-Planes-Charge-Banana-Ultra/dp/B001BHLWKI/ref=sr_sp-btf_title_1_13?ie=UTF8&amp;amp;qid=1406065892&amp;amp;sr=8-13&amp;amp;keywords=deans+connector+male&#34;&gt;Deans connector&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;The leads will need to be stripped to connect to the motor shield.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Tenergy-Universal-Smart-Charger-Battery/dp/B003MXMJX8/ref=sr_sp-atf_title_1_1?ie=UTF8&amp;amp;qid=1406065971&amp;amp;sr=8-1&amp;amp;keywords=tenergy+charger&#34;&gt;Battery Charger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/AmazonBasics-4-Port-USB-2-0-Ultra-Mini/dp/B003M0NURK/ref=sr_sp-atf_title_1_2?ie=UTF8&amp;amp;qid=1406066066&amp;amp;sr=8-2&amp;amp;keywords=usb+hub&#34;&gt;USB Hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.thinkgeek.com/product/96b3/&#34;&gt;Micro Fridge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Configuring</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/configuration</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/configuration</guid>
      <description>

&lt;p&gt;There is some small configuration to keep in mind as you use the different parts
of this project&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Nodebot Server&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Nodebot Client&lt;/h2&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Firmata&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>License</title>
      <link>http://ms-iot.github.io/windows-on-fridges/meta/license</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/meta/license</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;License&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>Source Organization</title>
      <link>http://ms-iot.github.io/windows-on-fridges/overview/source-directory</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/overview/source-directory</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Source for the Project&lt;/h2&gt;

&lt;p&gt;Sources for our project are located in multiple different repositories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Web App&lt;/li&gt;
&lt;li&gt;Nodebot Server&lt;/li&gt;
&lt;li&gt;Nodebot Client&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Azure</title>
      <link>http://ms-iot.github.io/windows-on-fridges/webservices/azure</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/webservices/azure</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Setting up Azure&lt;/h2&gt;

&lt;p&gt;To host our web services on Azure you will need five main components that will be referred to as:&lt;/p&gt;

&lt;p&gt;1.Web-app  (a UI to call the robot to a room), which will be created in the &lt;a href=&#34;http://ms-iot.github.io/windows-on-fridges/webservices/webapp/&#34;&gt;web-app wiki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2.Mobile Services (SQL server and database to store requests)&lt;/p&gt;

&lt;p&gt;3.Storage (place to store your map of the space)&lt;/p&gt;

&lt;p&gt;4.Cloud services (server that will run pathfinding once the request is made)&lt;/p&gt;

&lt;p&gt;5.Nodebot Server (server that posts requests to robot)&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Step 1.&lt;/h4&gt;

&lt;p&gt;However, you should start with creating Azure account. You can either &lt;a href=&#34;http://azure.microsoft.com/en-us/pricing/free-trial/&#34;&gt;start a free 30-day trial&lt;/a&gt; or go ahead and &lt;a href=&#34;http://msdn.microsoft.com/en-US/library/azure/hh531793.aspx#BKMK_AdminGuidelines&#34;&gt;buy a subscription&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Step 2.&lt;/h4&gt;

&lt;p&gt;For this project you will need &lt;a href=&#34;http://www.visualstudio.com/en-us/visual-studio-homepage-vs.aspx&#34;&gt;Visual Studio&lt;/a&gt; installed. While much of it can be done using git, some things, like manually uploading files to Azure Storage, are still unavailable any other way but through Visual Studio. Besides that, Azure SDK for Visual Studio is a very convenient way to publish changes to your code to Azure.&lt;/p&gt;

&lt;p&gt;Get Azure SDK for Visual Studio. You can use &lt;a href=&#34;http://www.microsoft.com/web/downloads/platform.aspx&#34;&gt;this installer&lt;/a&gt; to get the one you need.&lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Step 3.&lt;/h4&gt;

&lt;p&gt;Now that you have an account you can go to your Management portal and create Mobile services.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to Azure.microsoft.com -&amp;gt; Management portal. Sign in to your Azure account.&lt;/li&gt;
&lt;li&gt;At the bottom of the page click New -&amp;gt; Compute -&amp;gt; Mobile service -&amp;gt; create&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/azure/1.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type in the URL for your mobile service. This URL will later be referred to as your mobile service host. From the Database dropdown choose creating a new database. For region choose the region that is closest to you. For backend choose JavaScript. Leave other settings unchanged. Press the arrow at the bottom right corner.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/azure/2.jpg&#34; style=&#39;width:70%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Choose “New SQL database server” and input server login and password. You will have to enter these credentials later on, so try to not forget them!  Leave other settings unchanged. Press the checkmark symbol.&lt;/li&gt;
&lt;li&gt;You need to wait for the service to be created. It will take about a minute. When the status says “ready”, the mobile service is created.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that you created mobile services, you need to create the database schema that the app is using&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For that, go to your new mobile service - &amp;gt; DATA. Press “add a table”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/azure/3.jpg&#34; style=&#39;width:50%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Enter “offices” as a table name. Leave other settings unchanged. Press the checkmark symbol. You need to wait for the table to be created. It will take about a minute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/azure/4.jpg&#34; style=&#39;width:70%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When the table is created, click on it. Go to COLUMNS. Press ADD COLUMN at the bottom.
Add the following columns: &amp;ldquo;office&amp;rdquo; (string), &amp;ldquo;cancelled&amp;rdquo; (boolean), &amp;ldquo;complete&amp;rdquo; (boolean).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add another table titled “Feedback”: Go to your new mobile service - &amp;gt; DATA. Press “add a table”. Enter “Feedback” as a table name. Leave other settings unchanged.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Press the checkmark symbol. When the table is created, click on it. Go to COLUMNS. Press ADD COLUMN at the bottom.
Add the following column: &amp;ldquo;text&amp;rdquo; (string).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now you have Mobile service and database set up! If you want to study Azure Mobile Services more in-depth, go to &lt;a href=&#34;http://azure.microsoft.com/en-us/documentation/articles/mobile-services-html-how-to-use-client-library/#querying&#34;&gt;http://azure.microsoft.com/en-us/documentation/articles/mobile-services-html-how-to-use-client-library/#querying&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Step 6.&lt;/h4&gt;

&lt;p&gt;Now let’s create a new storage.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At the bottom of the page click new -&amp;gt; Data services -&amp;gt; Storage -&amp;gt; Quick Create. Input your storage URL and closest geo location to you. Leave other settings unchanged. Press “Create storage account”. You need to wait for the storage to be created. It will take about a minute.&lt;/li&gt;
&lt;li&gt;Now in the panel on the left, choose STORAGE and go to your new storage account. Go to CONTAINERS tab. Create a container called “maps”. Choose “Public Blob” in Access dropdown. Press the checkmark symbol.&lt;/li&gt;
&lt;li&gt;While the storage is being created you can go on with the instructions.&lt;/li&gt;
&lt;li&gt;To find out more about storage go to &lt;a href=&#34;http://azure.microsoft.com/en-us/documentation/articles/storage-dotnet-how-to-use-blobs/&#34;&gt;http://azure.microsoft.com/en-us/documentation/articles/storage-dotnet-how-to-use-blobs/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;Step 7.&lt;/h4&gt;

&lt;p&gt;Create cloud services where all the pathfinding will be happening.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;At the bottom of the page click new -&amp;gt; Compute -&amp;gt; Cloud Service -&amp;gt; Quick Create. Input your cloud services URL and closest geo location to you. Leave other settings unchanged. Press “Create cloud service”.&lt;/li&gt;
&lt;li&gt;While the cloud service is being created you can go on with the instructions.&lt;/li&gt;
&lt;li&gt;To find out more about cloud services go to &lt;a href=&#34;http://azure.microsoft.com/en-us/documentation/services/cloud-services/&#34;&gt;http://azure.microsoft.com/en-us/documentation/services/cloud-services/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Step 8.&lt;/h4&gt;

&lt;p&gt;To create a Nodebot Server you need a web site. In this step we will create the website on Azure, clone the nodebot-server repository, and publish the source files to your new Azure website using git. If you already done any of this steps while following &lt;a href=&#34;http://ms-iot.github.io/windows-on-fridges/nodebot/server/&#34;&gt;the Nodebot Server wiki&lt;/a&gt;, you can skip them this step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Click the + NEW icon on the bottom left of the portal. Click WEB SITE, then QUICK CREATE. Enter a value for URL. The URL you input for your website will be later referred to as “nodebot host” in Pathfinding wiki. Select the datacenter for your web site in the REGION dropdown. Leave other settings unchanged. Click the checkmark at the bottom of the dialog. You need to wait for the website to be created. It will take about a minute.&lt;/li&gt;
&lt;li&gt;Once the web site status changes to Running, click on the name of the web site to access the Dashboard.&lt;/li&gt;
&lt;li&gt;At the bottom right of the Quickstart page, select Set up a deployment from source control.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/azure/6.png&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When asked &amp;ldquo;Where is your source code?&amp;rdquo; select Local Git repository, and then click the arrow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/azure/7.png&#34; style=&#39;width:80%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To enable Git publishing, you must provide a user name and password. If you have previously enabled publishing for an Azure Web Site, you will not be prompted for the user name or password. Instead, a Git repository will be created using the user name and password you previously specified. Make a note of the user name and password, as they will be used for Git publishing to all Azure Web Sites you create.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Get the nodebot code from Github:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone http://github.com/ms-iot/wof-nodebot-server    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Find out URL to you local repository in Azure management portal: go to your nodebot website -&amp;gt; DEPLOYMENTS. Copy the GIT URL at the top right corner.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/azure/8.jpg&#34; style=&#39;width:80%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Now in the folder your local repository is perform the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add azure [URL for remote repository you just copied]
git push azure master    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can find out more about deploying to Azure from git at &lt;a href=&#34;http://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/&#34;&gt;http://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_7&#34;&gt;Now you have four out of five components set up for your Web Services. You already deployed the nodebot source files in step 7, and your mobile services are ready as well. In the next tabs you can find out how to create the web-app, upload the map to your storage, and set up cloud services to do pathfinding.&lt;/h4&gt;
</description>
    </item>
    
    <item>
      <title>Build</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/building</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/building</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Building the Robot&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Step 1. Robot frame&lt;/h2&gt;

&lt;p&gt;There are many frames to choose from when it comes to building a small to mid sized robot. &lt;a href=&#34;http://www.makeblock.cc/&#34;&gt;Makeblock&lt;/a&gt; is a simple open platform for robotics that is easy to put together. Here is an example configuration of a Makeblock robot with a galileo attached. You can get pretty creative here, there is no right way to build an awesome robot.
We chose to build the &lt;a href=&#34;/windows-on-fridges/pdf/Makeblock-Big-Tank.pdf&#34;&gt;Big Tank&lt;/a&gt; frame.
&lt;img src=&#34;/windows-on-fridges/img/nodebot/nodebot-frame.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;
There are many configurations of robots you can build on Makeblocks &lt;a href=&#34;https://github.com/Makeblock-official/Assembly-Instructions&#34;&gt;assembly instruction&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Step 2. Motors&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The motor shield we used is a &lt;a href=&#34;http://www.seeedstudio.com/depot/Motor-Shield-V20-p-1377.html?cPath=91_92&#34;&gt;SeeedStudio V1/V2 Motor Shield&lt;/a&gt;. This shield can either be powered directly from the board or from an external power source via its external power jack. Without external power the motors may not turn when a load is applied.

&lt;ul&gt;
&lt;li&gt;There is more documentation for the motor shield on the SeeedStudio &lt;a href=&#34;http://www.seeedstudio.com/wiki/Motor_Shield_V2.0&#34;&gt;wiki&lt;/a&gt;.
&lt;em&gt;Either the V1 or V2 motor shield from SeeedStudio will work&lt;/em&gt;
&lt;img src=&#34;/windows-on-fridges/img/nodebot/motorshield.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Connect the motor shield to the Galileo.&lt;/li&gt;
&lt;li&gt;Attach 2 motors to the shield, the polarity does not matter but will affect the direction of the motors. You may have to switch the wires if the motors are turning the wrong way.&lt;/li&gt;
&lt;li&gt;Attach the battery connector to the motor shield&amp;rsquo;s external power input.&lt;/li&gt;
&lt;li&gt;All together it should look something like this. &lt;em&gt;This version has the V1 shield, they are functionally the same&lt;/em&gt;
&lt;img src=&#34;/windows-on-fridges/img/nodebot/nodebot-motors-shield.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Step 3. Putting it all together&lt;/h2&gt;

&lt;p&gt;Secure all your parts on the robot frame. You will need space for a Galileo, 2 batteries, and a wifi adapter.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Step 4. Set up Wifi Adapter&lt;/h2&gt;

&lt;p&gt;Wifi gaming adapters allow you to connect devices to wifi that otherwise could
only connect over LAN.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Purchase an adapter, such as &lt;a href=&#34;http://www.amazon.com/NETGEAR-WNCE2001-Universal-Internet-Adapter/dp/B007CO5DZ4/ref=sr_1_3?ie=UTF8&amp;amp;qid=1404169366&amp;amp;sr=8-3&amp;amp;keywords=wireless+gaming+adapter&#34;&gt;this recommended option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow the instructions supplied with your gaming adapter to connect it to your wireless network.&lt;/li&gt;
&lt;li&gt;Connect the Gaming Adapter to the Galileo with an ethernet cable.&lt;/li&gt;
&lt;li&gt;The recommended adapter also includes a USB power cable; If your adapter includes a USB power cable connect it to the Galileo with a &lt;a href=&#34;http://www.amazon.com/Micro-USB-Male-Female-Adapter/dp/B0027YYMU6&#34;&gt;Micro USB Male to USB A Female Adapter&lt;/a&gt; . The Galileo can provide sufficient power to the recommended adapter.&lt;/li&gt;
&lt;li&gt;Connect your development machine to the same wireless network as the gaming adapter.&lt;/li&gt;
&lt;li&gt;Ping the Galileo by hostname and ensure it is connected to the network.&lt;/li&gt;
&lt;li&gt;You should now be able to deploy to the Galileo over wireless network!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Firmata</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/firmata</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/firmata</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Firmata&lt;/h2&gt;

&lt;p&gt;Firmata is a protocol that allows you to use a client library to interact with microcontrollers and other hardware. We will be using Standard Firmata on the Galileo and controlling it with &lt;a href=&#34;https://github.com/rwaldron/johnny-five&#34;&gt;Johnny-Five&lt;/a&gt; a NodeJS client library that is build for robotics.&lt;/p&gt;

&lt;p&gt;We are using a &lt;a href=&#34;http://github.com/connerbrooks/firmata-galileo&#34;&gt;modified version&lt;/a&gt; of &lt;a href=&#34;http://github.com/firmata/arduino&#34;&gt;Firmata Arduino&lt;/a&gt; the headers have been altered to be compatible with the Galileo SDK.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Running Firmata&lt;/h2&gt;

&lt;p&gt;Firmata must be running on the board before the node client can interact with it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Clone the Galileo Firmata Repository&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/path/to/galileo/firmata
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Open the Visual Studio project.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure the remote debugging settings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Refer to the &lt;a href=&#34;http://ms-iot.github.io/content&#34;&gt;Galileo SDK documentation&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Deploy the project to the Galileo.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you have deployed you will be able to telnet into the Galileo and remotely start firmata&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;telnet mygalileo
cd c:\test
Firmata.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We can now control the Galileo using the Firmata protocol with any client library.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Web App</title>
      <link>http://ms-iot.github.io/windows-on-fridges/webservices/webapp</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/webservices/webapp</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Web App&lt;/h2&gt;

&lt;p&gt;Our web application is a simple one-page app that has responsive design and can be used to call the robot to a certain room, cancel the request to a certain room, check on the request status, and submit feedback.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/app/0.jpg&#34; style=&#39;width:60%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Submitting the request:
To submit request the user needs to submit an office number to deliver a drink to and press “fetch the fridge” button.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cancelling the request:
After request is submitted it can be cancelled by pressing the “Cancel request” button&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Check on the status:
If the drink is already on a way to a submitted room, the web app will inform a user.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Submit feedback:
The submit feedback field is at the bottom of the page. The feedback is sent to the owner’s email and stored at the database.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To get the web app to work, you should have &lt;a href=&#34;http://ms-iot.github.io/windows-on-fridges/webservices/azure/&#34;&gt;set up your Azure account&lt;/a&gt;. Now you can get this web-app to run on Azure and work with your mobile services!&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Step 1.&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Get the source files by cloning the git repository at &lt;a href=&#34;https://github.com/ms-iot/wof-webapp.git&#34;&gt;https://github.com/ms-iot/wof-webapp.git&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/ms-iot/wof-webapp.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;Step 2.&lt;/h4&gt;

&lt;p&gt;Prepare your database to send you the feedback from the app. We will use &lt;a href=&#34;http://sendgrid.com/&#34;&gt;SendGrid&lt;/a&gt; for that. If you don&amp;rsquo;t want to receive emails from your web-app with feedback that people leave, skip this step.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow &lt;a href=&#34;http://azure.microsoft.com/en-us/documentation/articles/sendgrid-dotnet-how-to-send-email/&#34;&gt;these instructions&lt;/a&gt; to get a free SendGid account and get your SendGrid username and password.&lt;/li&gt;
&lt;li&gt;Open &amp;ldquo;insertFeedbackScript.js&amp;rdquo; from the files you got from Git in any editor. Replace &amp;ldquo;[your sendgrid username]&amp;rdquo; with your SendGrid username, &amp;ldquo;[your sendgrid password]&amp;rdquo; with your SendGrid password, and &amp;ldquo;youremail@host.com&amp;rdquo; with the email you want to use for feedback. Save.&lt;/li&gt;
&lt;li&gt;HINT: To find out your sendgrid username and password once you created the account, in Azure management portal go to ADD-ONS (in the menu on the left) -&amp;gt; SendGrid -&amp;gt; Connection Info (at the bottom).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/app/12.jpg&#34; style=&#39;width:70%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In your Azure management portal, go to your mobile service -&amp;gt; DATA -&amp;gt; Feedback -&amp;gt; SCRIPT. Copy the code from insertFeedbackScript.js instead of the script that handles the insert at the moment. Save at the bottom of the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/app/6.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Step 3.&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Open “page.js” from the files you got from Git in any editor. At the very top of the page replace “[your address]” with the address of your mobile service, and &amp;ldquo;[your key]&amp;rdquo; with the application key to your mobile service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/app/1.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HINT: To find your key navigate to your mobile services in Azure Management Portal and press “Manage keys” at the bottom. Copy the application key from the pop-up.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/cloudServices/8.jpg&#34; style=&#39;width:70%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Save page.js&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_4&#34;&gt;Step 4.&lt;/h4&gt;

&lt;p&gt;Create the website project:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In Visual Studio, go to File  -&amp;gt; New - &amp;gt; Website …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/app/2.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the pop-up choose ASP.NET empty website. Click “ok”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/app/3.jpg&#34; style=&#39;width:100%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Copy source files you got from git (including page.js you modified), except &amp;ldquo;insertFeedbackScript.js&amp;rdquo;. In Solution Explorer in visual Studio right-click on your web site, and click &amp;ldquo;paste&amp;rdquo; You source files should appear in Soution Explorer.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/app/7.jpg&#34; style=&#39;width:70%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;Step 5.&lt;/h4&gt;

&lt;p&gt;Publish your website to Azure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Go to Solution Explorer, right-click on your website and choose “Publish Web Site” from the dropdown.&lt;/li&gt;
&lt;li&gt;In the pop-up click on &amp;ldquo;Windows Azure Web Sites&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/app/8.jpg&#34; style=&#39;width:70%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the next pop-up sign into your Azure account if you are not singed in and choose the subscription you want to use. Click “Next”.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Just right to the “Existing Web Sites” dropdown choose &amp;ldquo;New&amp;hellip;&amp;rdquo;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/app/9.jpg&#34; style=&#39;width:70%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In the next window, for Site name input the URL you want your web-app to be located at. This will be the actual URL of your web-app used to fetch the robot. Choose your region. Choose the database you just created for mobile services. Input login and password you created when creating your mobile services. Hit “Create”.&lt;/li&gt;
&lt;li&gt;HINT: Don’t remember your database name? In Azure management portal go to your mobile service CONFIGURE tab. The database name is at the top.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/app/10.jpg&#34; style=&#39;width:70%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;When the website is created, hit &amp;ldquo;Publish&amp;rdquo;. When it is published, the browser window will open up and you will be able to start using your new web-app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/app/11.jpg&#34; style=&#39;width:70%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Step 6.&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Now you have to give permissions to your website to connect to your mobile services. In Azure management portal go to mobile services you created. Open CONFIGURE tab. Under &amp;ldquo;Cross-Origin Resource Sharing (cors)&amp;rdquo; line add your website’s URL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/windows-on-fridges/img/azure/5.jpg&#34; style=&#39;width:80%;&#39; border=&#34;0&#34; alt=&#34;Null&#34;&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Press “save” at the bottom of the page.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now your website is created!
Note that if you haven’t &lt;a href=&#34;http://ms-iot.github.io/windows-on-fridges/webservices/map/&#34;&gt;uploaded the map of the space&lt;/a&gt; yet, your web app will accept any room numbers to enable testing. Once you upload the map, your map will only accept office numbers present on the map.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node Client</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/client</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/client</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Node Client&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Make sure you have &lt;a href=&#34;http://nodejs.org&#34;&gt;NodeJS&lt;/a&gt; and &lt;a href=&#34;http://python.org&#34;&gt;Python&lt;/a&gt; installed and in your path&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Johnny-Five is the client library we will be using to interact with Firmata on the Galileo. Johnny-Five requires &lt;a href=&#34;https://github.com/voodootikigod/node-serialport&#34;&gt;SerialPort&lt;/a&gt; which is built with Python.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To get started clone the &lt;a href=&#34;https://github.com/ms-iot/wof-nodebot&#34;&gt;wof-nodebot-client&lt;/a&gt; repo.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/ms-iot/wof-nodebot
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install Node dependencies from the packages.json file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd wof-nodebot
npm install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Comment out line 485, there are some issues with a logging dependency&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//message[color];
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In the client.js file change galileoIP to reflect either the hostname or IP Address of your board.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var galileoIP = &#39;mygalileo&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;When we connect to a socket server you may want to change the serverUrl to an endpoint on Azure.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var serverUrl = &#39;http://localhost:1337&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We should now be able to test the client, from the client source directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node client.js
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;We should see a REPL prompt, at the prompt we can test the motors&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;motors.left.fwd(255)
motors.right.rev(255)
motors.left.stop()
motors.right.stop()
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At this point we should have a working robot that you can control from the command line.
We will now connect the client to the socket server that can run locally or on Azure.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Connecting to Firmata&lt;/h2&gt;

&lt;p&gt;Firmata is normally controlled over serial however, the Galileo does not have a proper serial connection to the computer.
  We instead use &lt;a href=&#34;https://github.com/ms-iot/galileo-sdk/blob/develop/source/NetworkSerial.cpp&#34;&gt;Network Serial&lt;/a&gt; for serial communication.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In the case of Node we use the net package to create a socket connection on the &lt;em&gt;default port 27015&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var net = require(&amp;quot;net&amp;quot;);


var socket = net.createConnection(27015, galileoIP); 
console.log(&#39;Socket created.&#39;);
this.socket.on(&#39;data&#39;, function (data) {
  // Log the response from the HTTP server.
  console.log(&#39;RESPONSE: &#39; + data);
}).on(&#39;connect&#39;, function () {
  // Manually write an HTTP request.
  console.log(&amp;quot;connected&amp;quot;);
}).on(&#39;end&#39;, function () {
  console.log(&#39;DONE&#39;);
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then we can create a Johnny-Five board object with this socket as the port.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var five = require(&amp;quot;johnny-five&amp;quot;);


board = new five.Board({
  port: socket
});
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>