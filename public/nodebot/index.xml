<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Nodebots on  </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>http://ms-iot.github.io/windows-on-fridges//nodebot/index.xml</link>
    
    
    
    <updated>Tue, 01 Jul 2014 00:00:00 UTC</updated>
    
    <item>
      <title>Hardware</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/hardware</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/hardware</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Hardware&lt;/h2&gt;

&lt;p&gt;The parts used are entirely dependent on what you wish to build.
This is the parts list for the robot that we built.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://windowsondevices.com&#34;&gt;Galileo Board&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://radioshack.com&#34;&gt;Motor Shield&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://makeblocks.cc&#34;&gt;Makeblock Robotics Kit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amazon.com&#34;&gt;Wireless Adapter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amazon.com&#34;&gt;Galileo Battery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amazon.com&#34;&gt;USB to Barrel Plug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amazon.com&#34;&gt;Motor Battery&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amazon.com&#34;&gt;Deans connector&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amazon.com&#34;&gt;Battery Charger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://amazon.com&#34;&gt;USB Hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thinkgeek.com&#34;&gt;Micro Fridge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Build</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/building</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/building</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Building the Robot&lt;/h2&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Step 1. Motors&lt;/h2&gt;

&lt;p&gt;Your Galileo should be plugged in and you should have &lt;a href=&#34;http://ms-iot.github.io/content/HelloBlinky.htm&#34;&gt;HelloBlinky&lt;/a&gt; working.
Connect the motor shield to the galileo and attach the 2 motors to the shield.
The motor shield we used is a &lt;a href=&#34;http://www.seeedstudio.com/depot/Motor-Shield-V20-p-1377.html?cPath=91_92&#34;&gt;SeeedStudio V2 Motor Shield&lt;/a&gt;. This shield can either be powered directly from the board or from an external power source via its external power jack. Without external power the motors may not turn when a load is applied.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Step 2. Robot frame&lt;/h2&gt;

&lt;p&gt;There are many frames to choose from when it comes to building a small to mid sized robot. &lt;a href=&#34;http://www.makeblock.cc/&#34;&gt;Makeblock&lt;/a&gt; is a simple open platform for robotics that is easy to put together. Here is an example configuration of a Makeblock robot with a galileo attached. You can get pretty creative here, there is no right way to build an awesome robot.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Step 3. Putting it all together&lt;/h2&gt;

&lt;p&gt;Secure all your parts on the robot frame. You will need space for a Galileo, 2 batteries, and a wifi adapter.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Firmata</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/firmata</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/firmata</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Firmata&lt;/h2&gt;

&lt;p&gt;Firmata is a protocol that allows you to use a client library to interact with microcontrollers and other hardware. We will be using Standard Firmata on the Galileo and controlling it with &lt;a href=&#34;https://github.com/rwaldron/johnny-five&#34;&gt;Johnny-Five&lt;/a&gt; a NodeJS client library that is build for robotics.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node Client</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/client</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/client</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Node Client&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Make sure you have &lt;a href=&#34;http://nodejs.org&#34;&gt;NodeJS&lt;/a&gt; and &lt;a href=&#34;http://python.org&#34;&gt;Python&lt;/a&gt; installed and in your path&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Johnny-Five is the client library we will be using to interact with Firmata on the Galileo. Johnny-Five requires &lt;a href=&#34;https://github.com/voodootikigod/node-serialport&#34;&gt;SerialPort&lt;/a&gt; which is built with Python.&lt;/p&gt;

&lt;p&gt;To get started clone the &lt;a href=&#34;https://github.com/ms-iot/wof-nodebot&#34;&gt;wof-nodebot-client&lt;/a&gt; repo.&lt;/p&gt;

&lt;p&gt;Open this directory in Command Line and type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will install all the dependencies in the packages.json file.&lt;/p&gt;

&lt;p&gt;There is currently one change that need to be made before we can run this project&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node_modules &amp;gt; johnny-five &amp;gt; lib &amp;gt; board.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;comment out the line&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;message[color];
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;in the function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Board.prototype.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the client.js file change galileoIP to reflect either the hostname or IP Address of your board.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var galileoIP = &#39;mygalileo&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;later when we connect to the socket server you may want to change the serverUrl&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var serverUrl = &#39;http://localhost:1337&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should now be able to test the client, from the client source directory&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node client.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;this should display a REPL prompt, at the prompt we can test the motors&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;motors.left.fwd(255)
motors.right.rev(255)
motors.left.stop()
motors.right.stop()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point we should have a working robot that you can control from the command line.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node Server</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/server</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/server</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Node Server&lt;/h2&gt;

&lt;p&gt;The node server uses Expressjs for handling HTTP requests and socket.io for talking to the client. This allows us to control the robot with simple REST calls to an endpoint either locally or in the cloud.&lt;/p&gt;

&lt;p&gt;To get started clone the &lt;a href=&#34;http://github.com/ms-iot/wof-nodebot-server&#34;&gt;wof-nodebot-server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Install dependencies&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to run locally just run the server&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to deploy to Azure you can follow &lt;a href=&#34;http://azure.microsoft.com/en-us/documentation/articles/web-sites-nodejs-develop-deploy-mac/&#34;&gt;this guide&lt;/a&gt; which will teach you how to deploy a hello world application. Instead of the the hello world application just set the upstream on the server you cloned to Azure&amp;rsquo;s endpoint&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add azure [URL for remote repository]
git push azure master
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Wifi Adapter</title>
      <link>http://ms-iot.github.io/windows-on-fridges/nodebot/wifiadapter</link>
      <pubDate>Tue, 01 Jul 2014 00:00:00 UTC</pubDate>
      
      <guid>http://ms-iot.github.io/windows-on-fridges/nodebot/wifiadapter</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Using a Wifi Gaming Adapter with the Intel Galileo&lt;/h2&gt;

&lt;p&gt;Wifi gaming adapters allow you to connect devices to wifi that otherwise could
only connect over LAN.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Purchase an adapter, such as &lt;a href=&#34;http://www.amazon.com/NETGEAR-WNCE2001-Universal-Internet-Adapter/dp/B007CO5DZ4/ref=sr_1_3?ie=UTF8&amp;amp;qid=1404169366&amp;amp;sr=8-3&amp;amp;keywords=wireless+gaming+adapter&#34;&gt;this recommended option&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Follow the instructions supplied with your gaming adapter to connect it to your wireless network.&lt;/li&gt;
&lt;li&gt;Connect the Gaming Adapter to the Galileo with an ethernet cable.&lt;/li&gt;
&lt;li&gt;The recommended adapter also includes a USB power cable; If your adapter includes a USB power cable connect it to the Galileo with a &lt;a href=&#34;http://www.amazon.com/Micro-USB-Male-Female-Adapter/dp/B0027YYMU6&#34;&gt;Micro USB Male to USB A Female Adapter&lt;/a&gt; . The Galileo can provide sufficient power to the recommended adapter.&lt;/li&gt;
&lt;li&gt;Connect your development machine to the same wireless network as the gaming adapter.&lt;/li&gt;
&lt;li&gt;Ping the Galileo by hostname and ensure it is connected to the network.&lt;/li&gt;
&lt;li&gt;You should now be able to deploy to the Galileo over wireless network!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>